[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"EdgeHightLight2",[{"hash":1146849037,"record":null,"name":"EdgeHightLight2|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform myDataFromMtl {\n  vec4 outlineColor;\n  float outlineWidth;\n};\nuniform myDataFromScript {\n  vec4  u_uvOffset;\n  vec2 textureSize;\n};\n#endif\nfloat getAlpha(sampler2D texture, vec4 uvOffset, vec2 uv0){\n  vec4 tempA = vec4(1,1,1,1);\n  if( uv0.x < uvOffset.x || uv0.y < uvOffset.y ||\n    uv0.x > uvOffset.z || uv0.y > uvOffset.w){\n      return 0.0;\n  }\n  else{\n  vec4 texture_tmp = texture(texture, uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    tempA.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    tempA.a *= texture_tmp.a;\n  #else\n    tempA *= texture_tmp;\n  #endif\n  }\n  return tempA.a;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    float width = outlineWidth / textureSize.x;\n    float L = getAlpha(texture, u_uvOffset, v_uv0 + vec2(width, 0.0));\n    float R = getAlpha(texture, u_uvOffset, v_uv0 - vec2(width, 0.0));\n    float T = getAlpha(texture, u_uvOffset, v_uv0 - vec2(0.0, width));\n    float B = getAlpha(texture, u_uvOffset, v_uv0 + vec2(0.0, width));\n    float LT = getAlpha(texture, u_uvOffset, v_uv0 + vec2(width, -width));\n    float LB = getAlpha(texture, u_uvOffset, v_uv0 + vec2(width, width));\n    float RT = getAlpha(texture, u_uvOffset, v_uv0 - vec2(width, width));\n    float RB = getAlpha(texture, u_uvOffset, v_uv0 - vec2(width, -width));\n    float result = L + R + T + B + LT + LB + RT + RB;\n    result *= (1.0 - o.a);\n    vec4 resultColor = result * outlineColor;\n    o = mix(resultColor,o,o.a);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 outlineColor;\nuniform float outlineWidth;\nuniform vec4 u_uvOffset;\nuniform vec2 textureSize;\n#endif\nfloat getAlpha(sampler2D texture, vec4 uvOffset, vec2 uv0){\n  vec4 tempA = vec4(1,1,1,1);\n  if( uv0.x < uvOffset.x || uv0.y < uvOffset.y ||\n    uv0.x > uvOffset.z || uv0.y > uvOffset.w){\n      return 0.0;\n  }\n  else{\n  vec4 texture_tmp = texture2D(texture, uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    tempA.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    tempA.a *= texture_tmp.a;\n  #else\n    tempA *= texture_tmp;\n  #endif\n  }\n  return tempA.a;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    float width = outlineWidth / textureSize.x;\n    float L = getAlpha(texture, u_uvOffset, v_uv0 + vec2(width, 0.0));\n    float R = getAlpha(texture, u_uvOffset, v_uv0 - vec2(width, 0.0));\n    float T = getAlpha(texture, u_uvOffset, v_uv0 - vec2(0.0, width));\n    float B = getAlpha(texture, u_uvOffset, v_uv0 + vec2(0.0, width));\n    float LT = getAlpha(texture, u_uvOffset, v_uv0 + vec2(width, -width));\n    float LB = getAlpha(texture, u_uvOffset, v_uv0 + vec2(width, width));\n    float RT = getAlpha(texture, u_uvOffset, v_uv0 - vec2(width, width));\n    float RB = getAlpha(texture, u_uvOffset, v_uv0 - vec2(width, -width));\n    float result = L + R + T + B + LT + LB + RT + RB;\n    result *= (1.0 - o.a);\n    vec4 resultColor = result * outlineColor;\n    o = mix(resultColor,o,o.a);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"myDataFromMtl","binding":1,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"outlineWidth","type":13,"count":1}],"defines":["USE_TEXTURE"]},{"name":"myDataFromScript","binding":2,"members":[{"name":"u_uvOffset","type":16,"count":1},{"name":"textureSize","type":14,"count":1}],"defines":["USE_TEXTURE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"EdgeHightLight2|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"outlineColor":{"type":16,"value":[255,255,255,255],"editor":{"type":"color"}},"outlineWidth":{"type":13,"value":[4]},"textureSize":{"type":14,"value":[100,100]},"u_uvOffset":{"type":16,"value":[0,0,1,1]}}}]}]]],0,0,[],[],[]]